start: statements

statements: statement*
statement: _WS? qualifier* _WS? expression _WS_INLINE? _END_STMT _WS? | emptystmt
?emptystmt: _WS? _END_STMT _WS?
?expression: assign | arith | block | ifstmt | whilestmt | funcdef | returnstmt | arraydec | classdec | namespace | operatordef
?stmt_or_block: expression | block
?block: OPEN_BRACE _WS? statements _WS? CLOSE_BRACE
?ifstmt: IF _WS? expression _WS? stmt_or_block _WS? elifstmt?
?elifstmt: ELIF _WS? expression _WS? stmt_or_block _WS? elifstmt? | elsestmt
?elsestmt: ELSE _WS? stmt_or_block
?whilestmt: WHILE _WS? expression _WS? stmt_or_block
?funcdef: FN _WS? NAME? _WS? OPEN_PAREN _WS? arglist? _WS? CLOSE_PAREN _WS? rettypeexpr? _WS? block
?operatordef: OPERATOR _WS? name_or_self? _WS? opop _WS? name_or_self? _WS? rettypeexpr? _WS? block
?opop: opnormalop | opaccessop
?opnormalop: ASSIGNOP | SUMOP | UNOP | EXPOP | PRODUCTOP | SHIFTOP | BITANDOP | BITXOROP | BITOROP | RELOP | NOTOP | ANDOP | OROP
?opaccessop: openop _WS? arglist? _WS? closeop
?openop: OPEN_PAREN | OPEN_SQUARE
?closeop: CLOSE_PAREN | CLOSE_SQUARE
?name_or_self: NAME _WS? typeexpr? | SELF
arglist: primary _WS? moreargs?
moreargs: COMMA _WS? NAME _WS? moreargs?
?returnstmt: RETURN _WS? expression?
?arraydec: OPEN_SQUARE _WS? arraydeclist? _WS? CLOSE_SQUARE
?arraykeydec: expression _WS? COLON
arraydecele: arraykeydec? _WS? expression
?arraydeclist: arraydecele _WS? morearraydec? | COLON
?morearraydec: COMMA _WS? arraydecele _WS? morearraydec?
?classdec: classword _WS? NAME? _WS? oflist? _WS? haslist? _WS? block
oflist: OF _WS? NAME _WS? moreof?
?moreof: COMMA _WS? NAME _WS? moreof?
haslist: HAS _WS? NAME _WS? morehas?
?morehas: COMMA _WS? NAME _WS? morehas?
typeexpr: COLON _WS? arith
rettypeexpr: ARROW _WS? arith
namespace: NAMESPACE _WS? NAME? _WS? block
?assign: primary _WS? ASSIGNOP _WS? expression
?arith: logicor
?logicor: logicand (_WS? OROP _WS? logicand)+ | logicand
?logicand: logicnot (_WS? ANDOP _WS? logicnot)+ | logicnot
?logicnot: NOTOP _WS? logicnot | relation
?relation: bitor (_WS? RELOP _WS? bitor)+ | bitor
?bitor: bitor _WS? BITOROP _WS? bitxor | bitxor
?bitxor: bitxor _WS? BITXOROP _WS? bitand | bitand
?bitand: bitand _WS? BITANDOP _WS? shift | shift
?shift: shift _WS? SHIFTOP _WS? sum | sum
?sum: sum _WS? SUMOP _WS? product | product
?product: product _WS? PRODUCTOP _WS? unop | unop
?unop: UNOP _WS? unop | exponent
?exponent: parens _WS? EXPOP _WS? unop | parens
?parens: OPEN_PAREN _WS? expression _WS? CLOSE_PAREN | primary
primary: subprime _WS? typeexpr?
subprime: subprime _WS? accessor | atom
?accessor: dotaccess | call | arrayaccess
dotaccess: dotop NAME
arrayaccess: OPEN_SQUARE _WS? slices _WS? CLOSE_SQUARE
call: OPEN_PAREN _WS? arguments? _WS? CLOSE_PAREN
slices: slice _WS? moreslice?
?slice: expression _WS? toslice?
?toslice: COLON _WS? expression _WS? incslice?
?incslice: COLON _WS? expression
?moreslice: COMMA _WS? slice _WS? moreslice?
arguments: expression _WS? morearguments?
morearguments: COMMA _WS? expression _WS? morearguments?
atom: NAME | literal
literal: number | string
number: INT | FLOAT | HEX | BIN | OCT
string: STRING | ML_STRING
?classword: CLASS | TRAIT | STATIC
qualifier: CLASSVAR | FINAL | COMPLETE | FIXED | TERMINAL | CONST | INIT | PRIVATE | NOINHERIT | DEPENDS
?dotop: DOT

NAME.0: ("a".."z"|"A".."Z"|"_")("a".."z"|"0".."9"|"A".."Z"|"_")*
INT: "0"|"-"?("1".."9")("0".."9")*
FLOAT: "-"?("0".."9")+"."("0".."9")+
HEX: "0x" ("a".."f"|"A".."F"|"0".."9")+
BIN: "0b" ("0".."1")+
OCT: "0o" ("0".."7")+
STRING: /([f]?r?|r[f])("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/i
ML_STRING: /([f]?r?|r[f])(""".*?(?<!\\)(\\\\)*?"""|'''.*?(?<!\\)(\\\\)*?''')/is
ASSIGNOP: "="
SUMOP: "+" | "-"
UNOP: "+" | "-" | "~"
EXPOP: "**"
PRODUCTOP: "*" | "/" | "//" | "%"
SHIFTOP: "<<" | ">>"
BITANDOP: "&"
BITXOROP: "^"
BITOROP: "|"
RELOP: "==" | "!=" | ">" | "<" | ">=" | "<=" | IN | HAS | OF | IS | NOTOP _WS? IN | NOTOP _WS? HAS | NOTOP _WS? OF | NOTOP _WS? IS
NOTOP: "!" | "not"
ANDOP: "&&" | "and"
OROP: "||" | "or"
OPEN_PAREN: "("
CLOSE_PAREN: ")"
OPEN_BRACE: "{"
CLOSE_BRACE: "}"
IF.1: "if"
ELIF.1: "elif"
ELSE.2: "else"
WHILE: "while"
FOR: "for"
FN: "fn"
RETURN: "return"
CLASS: "class"
TRAIT: "trait"
STATIC: "static"
FINAL: "final"
COMPLETE: "complete"
FIXED: "fixed"
TERMINAL: "terminal"
CONST: "const"
INIT: "init"
PRIVATE: "private"
NOINHERIT: "noinherit"
DEPENDS: "depends"
CLASSVAR: "classvar"
NAMESPACE: "namespace"
OPERATOR: "operator"
SELF: "self"
OF: "of"
HAS: "has"
IN: "in"
IS: "is"
DOT: "."
COMMA: ","
COLON: ":"
ARROW: "->"
OPEN_SQUARE: "["
CLOSE_SQUARE: "]"
_END_STMT.1: (";" | "\n")

_WS_INLINE: (" "|"\t")+
_WS: (" "|"\t"|"\r"|"\n")+
HASH_COMMENT.0: /#[^\n]*/
%ignore HASH_COMMENT
